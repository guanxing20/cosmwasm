{
  "type": "v1",
  "root": 0,
  "definitions": [
    {
      "name": "staking_msg_InvestmentResponse",
      "type": "struct",
      "properties": {
        "exit_tax": {
          "description": "this is how much the owner takes as a cut when someone unbonds",
          "value": 5
        },
        "min_withdrawal": {
          "description": "This is the minimum amount we will pull out to reinvest, as well as a minimum\nthat can be unbonded (to avoid needless staking tx)",
          "value": 1
        },
        "nominal_value": {
          "value": 5
        },
        "owner": {
          "description": "owner created the contract and takes a cut",
          "value": 3
        },
        "staked_tokens": {
          "value": 2
        },
        "token_supply": {
          "value": 1
        },
        "validator": {
          "description": "All tokens are bonded to this validator",
          "value": 3
        }
      }
    },
    {
      "name": "cosmwasm_std_math_uint128_Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding,\nsuch that the full u128 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n```\n# use cosmwasm_std::Uint128;\nlet a = Uint128::from(123u128);\nassert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64);\nassert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32);\nassert_eq!(c.u128(), 70);\n```",
      "type": "integer",
      "precision": 128,
      "signed": false
    },
    {
      "name": "cosmwasm_std_coin_Coin",
      "type": "struct",
      "properties": {
        "amount": {
          "value": 4
        },
        "denom": {
          "value": 3
        }
      }
    },
    {
      "name": "String",
      "type": "string"
    },
    {
      "name": "cosmwasm_std_math_uint256_Uint256",
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding,\nsuch that the full u256 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `new` to create instances out of u128, `from` for other primitive uint types\nor `from_be_bytes` to provide big endian bytes:\n\n```\n# use cosmwasm_std::Uint256;\nlet a = Uint256::new(258u128);\nlet b = Uint256::from(258u16);\nlet c = Uint256::from_be_bytes([\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n]);\nassert_eq!(a, b);\nassert_eq!(a, c);\n```",
      "type": "integer",
      "precision": 256,
      "signed": false
    },
    {
      "name": "cosmwasm_std_math_decimal_Decimal",
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "decimal",
      "precision": 128,
      "signed": false
    }
  ]
}
