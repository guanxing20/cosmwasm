{
  "type": "v1",
  "root": 0,
  "definitions": [
    {
      "name": "staking_msg_ExecuteMsg",
      "type": "enum",
      "cases": {
        "bond": {
          "description": "Bond will bond all staking tokens sent with the message and release derivative tokens",
          "type": "named",
          "properties": {}
        },
        "bond_all_tokens": {
          "description": "_BondAllTokens can only be called by the contract itself, after all rewards have been\nwithdrawn. This is an example of using \"callbacks\" in message flows.\nThis can only be invoked by the contract itself as a return from Reinvest",
          "type": "named",
          "properties": {}
        },
        "claim": {
          "description": "Claim is used to claim your native tokens that you previously \"unbonded\"\nafter the chain-defined waiting period (eg. 3 weeks)",
          "type": "named",
          "properties": {}
        },
        "reinvest": {
          "description": "Reinvest will check for all accumulated rewards, withdraw them, and\nre-bond them to the same validator. Anyone can call this, which updates\nthe value of the token (how much under custody).",
          "type": "named",
          "properties": {}
        },
        "transfer": {
          "description": "Transfer moves the derivative token",
          "type": "named",
          "properties": {
            "amount": {
              "value": 2
            },
            "recipient": {
              "value": 1
            }
          }
        },
        "unbond": {
          "description": "Unbond will \"burn\" the given amount of derivative tokens and send the unbonded\nstaking tokens to the message sender (after exit tax is deducted)",
          "type": "named",
          "properties": {
            "amount": {
              "value": 2
            }
          }
        }
      }
    },
    {
      "name": "String",
      "type": "string"
    },
    {
      "name": "cosmwasm_std_math_uint128_Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding,\nsuch that the full u128 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n```\n# use cosmwasm_std::Uint128;\nlet a = Uint128::from(123u128);\nassert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64);\nassert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32);\nassert_eq!(c.u128(), 70);\n```",
      "type": "integer",
      "precision": 128,
      "signed": false
    }
  ]
}
