{
  "contract_name": "staking",
  "contract_version": "0.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "type": "v1",
    "root": 0,
    "definitions": [
      {
        "name": "staking_msg_InstantiateMsg",
        "type": "struct",
        "properties": {
          "decimals": {
            "description": "decimal places of the derivative token (for UI)\nTODO: does this make sense? Do we need to normalize on this?\nWe don't even know the decimals of the native token",
            "value": 2
          },
          "exit_tax": {
            "description": "this is how much the owner takes as a cut when someone unbonds\nTODO",
            "value": 3
          },
          "min_withdrawal": {
            "description": "This is the minimum amount we will pull out to reinvest, as well as a minimum\nthat can be unbonded (to avoid needless staking tx)",
            "value": 4
          },
          "name": {
            "description": "name of the derivative token (FIXME: auto-generate?)",
            "value": 1
          },
          "symbol": {
            "description": "symbol / ticker of the derivative token",
            "value": 1
          },
          "validator": {
            "description": "This is the validator that all tokens will be bonded to",
            "value": 1
          }
        }
      },
      {
        "name": "String",
        "type": "string"
      },
      {
        "name": "u8",
        "type": "integer",
        "precision": 8,
        "signed": false
      },
      {
        "name": "cosmwasm_std_math_decimal_Decimal",
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "decimal",
        "precision": 128,
        "signed": false
      },
      {
        "name": "cosmwasm_std_math_uint128_Uint128",
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding,\nsuch that the full u128 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n```\n# use cosmwasm_std::Uint128;\nlet a = Uint128::from(123u128);\nassert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64);\nassert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32);\nassert_eq!(c.u128(), 70);\n```",
        "type": "integer",
        "precision": 128,
        "signed": false
      }
    ]
  },
  "execute": {
    "type": "v1",
    "root": 0,
    "definitions": [
      {
        "name": "staking_msg_ExecuteMsg",
        "type": "enum",
        "cases": {
          "bond": {
            "description": "Bond will bond all staking tokens sent with the message and release derivative tokens",
            "type": "named",
            "properties": {}
          },
          "bond_all_tokens": {
            "description": "_BondAllTokens can only be called by the contract itself, after all rewards have been\nwithdrawn. This is an example of using \"callbacks\" in message flows.\nThis can only be invoked by the contract itself as a return from Reinvest",
            "type": "named",
            "properties": {}
          },
          "claim": {
            "description": "Claim is used to claim your native tokens that you previously \"unbonded\"\nafter the chain-defined waiting period (eg. 3 weeks)",
            "type": "named",
            "properties": {}
          },
          "reinvest": {
            "description": "Reinvest will check for all accumulated rewards, withdraw them, and\nre-bond them to the same validator. Anyone can call this, which updates\nthe value of the token (how much under custody).",
            "type": "named",
            "properties": {}
          },
          "transfer": {
            "description": "Transfer moves the derivative token",
            "type": "named",
            "properties": {
              "amount": {
                "value": 2
              },
              "recipient": {
                "value": 1
              }
            }
          },
          "unbond": {
            "description": "Unbond will \"burn\" the given amount of derivative tokens and send the unbonded\nstaking tokens to the message sender (after exit tax is deducted)",
            "type": "named",
            "properties": {
              "amount": {
                "value": 2
              }
            }
          }
        }
      },
      {
        "name": "String",
        "type": "string"
      },
      {
        "name": "cosmwasm_std_math_uint128_Uint128",
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding,\nsuch that the full u128 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n```\n# use cosmwasm_std::Uint128;\nlet a = Uint128::from(123u128);\nassert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64);\nassert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32);\nassert_eq!(c.u128(), 70);\n```",
        "type": "integer",
        "precision": 128,
        "signed": false
      }
    ]
  },
  "query": {
    "type": "v1",
    "root": 0,
    "definitions": [
      {
        "name": "staking_msg_QueryMsg",
        "type": "enum",
        "cases": {
          "balance": {
            "description": "Balance shows the number of staking derivatives",
            "type": "named",
            "properties": {
              "address": {
                "value": 1
              }
            }
          },
          "claims": {
            "description": "Claims shows the number of tokens this address can access when they are done unbonding",
            "type": "named",
            "properties": {
              "address": {
                "value": 1
              }
            }
          },
          "investment": {
            "description": "Investment shows info on total staking tokens under custody,\nwith which validator, as well as how many derivative tokens are lists.\nIt also shows with the exit tax.",
            "type": "named",
            "properties": {}
          },
          "token_info": {
            "description": "TokenInfo shows the metadata of the token for UIs",
            "type": "named",
            "properties": {}
          }
        }
      },
      {
        "name": "String",
        "type": "string"
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "balance": {
      "type": "v1",
      "root": 0,
      "definitions": [
        {
          "name": "staking_msg_BalanceResponse",
          "type": "struct",
          "properties": {
            "balance": {
              "value": 1
            }
          }
        },
        {
          "name": "cosmwasm_std_math_uint128_Uint128",
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding,\nsuch that the full u128 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n```\n# use cosmwasm_std::Uint128;\nlet a = Uint128::from(123u128);\nassert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64);\nassert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32);\nassert_eq!(c.u128(), 70);\n```",
          "type": "integer",
          "precision": 128,
          "signed": false
        }
      ]
    },
    "claims": {
      "type": "v1",
      "root": 0,
      "definitions": [
        {
          "name": "staking_msg_ClaimsResponse",
          "type": "struct",
          "properties": {
            "claims": {
              "value": 1
            }
          }
        },
        {
          "name": "cosmwasm_std_math_uint128_Uint128",
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding,\nsuch that the full u128 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n```\n# use cosmwasm_std::Uint128;\nlet a = Uint128::from(123u128);\nassert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64);\nassert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32);\nassert_eq!(c.u128(), 70);\n```",
          "type": "integer",
          "precision": 128,
          "signed": false
        }
      ]
    },
    "investment": {
      "type": "v1",
      "root": 0,
      "definitions": [
        {
          "name": "staking_msg_InvestmentResponse",
          "type": "struct",
          "properties": {
            "exit_tax": {
              "description": "this is how much the owner takes as a cut when someone unbonds",
              "value": 5
            },
            "min_withdrawal": {
              "description": "This is the minimum amount we will pull out to reinvest, as well as a minimum\nthat can be unbonded (to avoid needless staking tx)",
              "value": 1
            },
            "nominal_value": {
              "value": 5
            },
            "owner": {
              "description": "owner created the contract and takes a cut",
              "value": 3
            },
            "staked_tokens": {
              "value": 2
            },
            "token_supply": {
              "value": 1
            },
            "validator": {
              "description": "All tokens are bonded to this validator",
              "value": 3
            }
          }
        },
        {
          "name": "cosmwasm_std_math_uint128_Uint128",
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding,\nsuch that the full u128 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n```\n# use cosmwasm_std::Uint128;\nlet a = Uint128::from(123u128);\nassert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64);\nassert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32);\nassert_eq!(c.u128(), 70);\n```",
          "type": "integer",
          "precision": 128,
          "signed": false
        },
        {
          "name": "cosmwasm_std_coin_Coin",
          "type": "struct",
          "properties": {
            "amount": {
              "value": 4
            },
            "denom": {
              "value": 3
            }
          }
        },
        {
          "name": "String",
          "type": "string"
        },
        {
          "name": "cosmwasm_std_math_uint256_Uint256",
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding,\nsuch that the full u256 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `new` to create instances out of u128, `from` for other primitive uint types\nor `from_be_bytes` to provide big endian bytes:\n\n```\n# use cosmwasm_std::Uint256;\nlet a = Uint256::new(258u128);\nlet b = Uint256::from(258u16);\nlet c = Uint256::from_be_bytes([\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n]);\nassert_eq!(a, b);\nassert_eq!(a, c);\n```",
          "type": "integer",
          "precision": 256,
          "signed": false
        },
        {
          "name": "cosmwasm_std_math_decimal_Decimal",
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "decimal",
          "precision": 128,
          "signed": false
        }
      ]
    },
    "token_info": {
      "type": "v1",
      "root": 0,
      "definitions": [
        {
          "name": "staking_msg_TokenInfoResponse",
          "description": "TokenInfoResponse is info to display the derivative token in a UI",
          "type": "struct",
          "properties": {
            "decimals": {
              "description": "decimal places of the derivative token (for UI)",
              "value": 2
            },
            "name": {
              "description": "name of the derivative token",
              "value": 1
            },
            "symbol": {
              "description": "symbol / ticker of the derivative token",
              "value": 1
            }
          }
        },
        {
          "name": "String",
          "type": "string"
        },
        {
          "name": "u8",
          "type": "integer",
          "precision": 8,
          "signed": false
        }
      ]
    }
  }
}
