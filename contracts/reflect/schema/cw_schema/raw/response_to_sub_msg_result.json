{
  "type": "v1",
  "root": 0,
  "definitions": [
    {
      "name": "cosmwasm_std_results_submessages_Reply",
      "description": "The result object returned to `reply`. We always get the ID from the submessage\nback and then must handle success and error cases ourselves.",
      "type": "struct",
      "properties": {
        "gas_used": {
          "defaulting": true,
          "description": "The amount of gas used by the submessage,\nmeasured in [Cosmos SDK gas](https://github.com/CosmWasm/cosmwasm/blob/main/docs/GAS.md).\n\nThis only contains a useful value on chains running CosmWasm 2.0 or higher.\nOn older chains, this field is always 0.",
          "value": 1
        },
        "id": {
          "description": "The ID that the contract set when emitting the `SubMsg`.\nUse this to identify which submessage triggered the `reply`.",
          "value": 1
        },
        "payload": {
          "defaulting": true,
          "description": "Some arbitrary data that the contract set when emitting the `SubMsg`.\nThis is just passed into the `reply` entry point and is not stored to state.\n\nUnset/nil/null cannot be differentiated from empty data.\n\nOn chains running CosmWasm 1.x this field is never filled.",
          "value": 2
        },
        "result": {
          "value": 3
        }
      }
    },
    {
      "name": "u64",
      "type": "integer",
      "precision": 64,
      "signed": false
    },
    {
      "name": "cosmwasm_std_binary_Binary",
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization\nwith serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>.\nSee also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "binary"
    },
    {
      "name": "cosmwasm_std_results_submessages_SubMsgResult",
      "description": "This is the result type that is returned from a sub message execution.\n\nWe use a custom type here instead of Rust's Result because we want to be able to\ndefine the serialization, which is a public interface. Every language that compiles\nto Wasm and runs in the ComsWasm VM needs to create the same JSON representation.\n\nUntil version 1.0.0-beta5, `ContractResult<SubMsgResponse>` was used instead\nof this type. Once serialized, the two types are the same. However, in the Rust type\nsystem we want different types for clarity and documentation reasons.\n\n# Examples\n\nSuccess:\n\n```\n# use cosmwasm_std::{to_json_string, Binary, Event, SubMsgResponse, SubMsgResult};\n#[allow(deprecated)]\nlet response = SubMsgResponse {\ndata: Some(Binary::from_base64(\"MTIzCg==\").unwrap()),\nevents: vec![Event::new(\"wasm\").add_attribute(\"foo\", \"bar\")],\nmsg_responses: vec![],\n};\nlet result: SubMsgResult = SubMsgResult::Ok(response);\nassert_eq!(\nto_json_string(&result).unwrap(),\nr#\"{\"ok\":{\"events\":[{\"type\":\"wasm\",\"attributes\":[{\"key\":\"foo\",\"value\":\"bar\"}]}],\"data\":\"MTIzCg==\",\"msg_responses\":[]}}\"#,\n);\n```\n\nFailure:\n\n```\n# use cosmwasm_std::{to_json_string, SubMsgResult, Response};\nlet error_msg = String::from(\"Something went wrong\");\nlet result = SubMsgResult::Err(error_msg);\nassert_eq!(to_json_string(&result).unwrap(), r#\"{\"error\":\"Something went wrong\"}\"#);\n```",
      "type": "enum",
      "cases": {
        "error": {
          "description": "An error type that every custom error created by contract developers can be converted to.\nThis could potentially have more structure, but String is the easiest.",
          "type": "tuple",
          "items": [
            6
          ]
        },
        "ok": {
          "type": "tuple",
          "items": [
            4
          ]
        }
      }
    },
    {
      "name": "cosmwasm_std_results_submessages_SubMsgResponse",
      "description": "The information we get back from a successful sub message execution",
      "type": "struct",
      "properties": {
        "data": {
          "value": 10
        },
        "events": {
          "description": "The Cosmos SDK events emitted by the submessage.\n\nThis is only filled if the submessage was itself a [`crate::WasmMsg`].\nThe reason for this is that events are [not part of consensus] and therefore not guaranteed to be deterministic,\nso the VM only returns events of wasm messages, which we know are deterministic.\n\n[not part of consensus]: https://github.com/tendermint/tendermint/blob/eed27addecb339cfaeba8fda774e6ab37cdb3774/spec/abci/abci.md#events",
          "value": 9
        },
        "msg_responses": {
          "defaulting": true,
          "description": "The responses from the messages emitted by the submessage.\nIn most cases, this is equivalent to the Cosmos SDK's [MsgResponses], which usually contains a [single message].\nHowever, wasmd allows chains to translate a single contract message into multiple SDK messages.\nIn that case all the MsgResponses from each are concatenated into this flattened `Vec`.\n\n[MsgResponses]: https://github.com/cosmos/cosmos-sdk/blob/316750cc8cd8b3296fa233f4da2e39cbcdc34517/proto/cosmos/base/abci/v1beta1/abci.proto#L106-L109\n[single message]: https://github.com/cosmos/cosmos-sdk/blob/v0.50.4/baseapp/baseapp.go#L1020-L1023",
          "value": 12
        }
      }
    },
    {
      "name": "cosmwasm_std_results_events_Event",
      "description": "A full [*Cosmos SDK* event].\n\nThis version uses string attributes (similar to [*Cosmos SDK* StringEvent]),\nwhich then get magically converted to bytes for Tendermint somewhere between\nthe Rust-Go interface, JSON deserialization and the `NewEvent` call in Cosmos SDK.\n\n[*Cosmos SDK* event]: https://docs.cosmos.network/main/learn/advanced/events\n[*Cosmos SDK* StringEvent]: https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/base/abci/v1beta1/abci.proto#L56-L70",
      "type": "struct",
      "properties": {
        "attributes": {
          "description": "The attributes to be included in the event.\n\nYou can learn more about these from [*Cosmos SDK* docs].\n\n[*Cosmos SDK* docs]: https://docs.cosmos.network/main/learn/advanced/events",
          "value": 8
        },
        "type": {
          "description": "The event type. This is renamed to \"ty\" because \"type\" is reserved in Rust. This sucks, we know.",
          "value": 6
        }
      }
    },
    {
      "name": "String",
      "type": "string"
    },
    {
      "name": "cosmwasm_std_results_events_Attribute",
      "description": "An key value pair that is used in the context of event attributes in logs",
      "type": "struct",
      "properties": {
        "key": {
          "value": 6
        },
        "value": {
          "value": 6
        }
      }
    },
    {
      "name": "alloc::vec::Vec<cosmwasm_std::results::events::Attribute>",
      "type": "array",
      "items": 7
    },
    {
      "name": "alloc::vec::Vec<cosmwasm_std::results::events::Event>",
      "type": "array",
      "items": 5
    },
    {
      "name": "core::option::Option<cosmwasm_std::binary::Binary>",
      "type": "optional",
      "inner": 2
    },
    {
      "name": "cosmwasm_std_results_submessages_MsgResponse",
      "type": "struct",
      "properties": {
        "type_url": {
          "value": 6
        },
        "value": {
          "value": 2
        }
      }
    },
    {
      "name": "alloc::vec::Vec<cosmwasm_std::results::submessages::MsgResponse>",
      "type": "array",
      "items": 11
    }
  ]
}
