{
  "contract_name": "cyberpunk",
  "contract_version": "0.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "type": "v1",
    "root": 0,
    "definitions": [
      {
        "name": "cosmwasm_std_results_empty_Empty",
        "description": "An empty struct that serves as a placeholder in different places,\nsuch as contracts that don't set a custom message.\n\nIt is designed to be expressible in correct JSON and JSON Schema but\ncontains no meaningful data. Previously we used enums without cases,\nbut those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "struct",
        "properties": {}
      }
    ]
  },
  "execute": {
    "type": "v1",
    "root": 0,
    "definitions": [
      {
        "name": "cyberpunk_msg_ExecuteMsg",
        "type": "enum",
        "cases": {
          "allocate_large_memory": {
            "description": "Allocate large amounts of memory without consuming much gas",
            "type": "named",
            "properties": {
              "pages": {
                "value": 1
              }
            }
          },
          "argon2": {
            "description": "Hashes some data. Uses CPU and memory, but no external calls.",
            "type": "named",
            "properties": {
              "mem_cost": {
                "description": "The amount of memory requested (KB).",
                "value": 1
              },
              "time_cost": {
                "description": "The number of passes.",
                "value": 1
              }
            }
          },
          "cpu_loop": {
            "description": "Infinite loop to burn cpu cycles (only run when metering is enabled)",
            "type": "named",
            "properties": {}
          },
          "debug": {
            "description": "Does a bit of work and calls debug",
            "type": "named",
            "properties": {}
          },
          "memory_loop": {
            "description": "Infinite loop reading and writing memory",
            "type": "named",
            "properties": {}
          },
          "message_loop": {
            "description": "Infinite loop sending message to itself",
            "type": "named",
            "properties": {}
          },
          "mirror_env": {
            "description": "Returns the env for testing",
            "type": "named",
            "properties": {}
          },
          "noop": {
            "description": "Does nothing. This can be used for baseline contract execution performance measurements.",
            "type": "named",
            "properties": {}
          },
          "panic": {
            "description": "Trigger a panic to ensure framework handles gracefully",
            "type": "named",
            "properties": {}
          },
          "storage_loop": {
            "description": "Infinite loop making storage calls (to test when their limit hits)",
            "type": "named",
            "properties": {}
          },
          "unreachable": {
            "description": "In contrast to Panic, this does not use the panic handler.\n\nFrom <https://doc.rust-lang.org/beta/core/arch/wasm32/fn.unreachable.html>:\n\"Generates the unreachable instruction, which causes an unconditional trap.\"",
            "type": "named",
            "properties": {}
          }
        }
      },
      {
        "name": "u32",
        "type": "integer",
        "precision": 32,
        "signed": false
      }
    ]
  },
  "query": {
    "type": "v1",
    "root": 0,
    "definitions": [
      {
        "name": "cyberpunk_msg_QueryMsg",
        "type": "enum",
        "cases": {
          "denom": {
            "description": "Queries `DenomMetadata` from the bank module and returns the result",
            "type": "named",
            "properties": {
              "denom": {
                "value": 1
              }
            }
          },
          "denoms": {
            "description": "Queries `AllDenomMetadata` from the bank module repeatedly and returns all entries",
            "type": "named",
            "properties": {}
          },
          "mirror_env": {
            "description": "Returns the env for testing",
            "type": "named",
            "properties": {}
          }
        }
      },
      {
        "name": "String",
        "type": "string"
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "denom": {
      "type": "v1",
      "root": 0,
      "definitions": [
        {
          "name": "cosmwasm_std_metadata_DenomMetadata",
          "description": "Replicates the cosmos-sdk bank module Metadata type",
          "type": "struct",
          "properties": {
            "base": {
              "value": 1
            },
            "denom_units": {
              "value": 5
            },
            "description": {
              "value": 1
            },
            "display": {
              "value": 1
            },
            "name": {
              "value": 1
            },
            "symbol": {
              "value": 1
            },
            "uri": {
              "value": 1
            },
            "uri_hash": {
              "value": 1
            }
          }
        },
        {
          "name": "String",
          "type": "string"
        },
        {
          "name": "cosmwasm_std_metadata_DenomUnit",
          "description": "Replicates the cosmos-sdk bank module DenomUnit type",
          "type": "struct",
          "properties": {
            "aliases": {
              "value": 4
            },
            "denom": {
              "value": 1
            },
            "exponent": {
              "value": 3
            }
          }
        },
        {
          "name": "u32",
          "type": "integer",
          "precision": 32,
          "signed": false
        },
        {
          "name": "alloc::vec::Vec<alloc::string::String>",
          "type": "array",
          "items": 1
        },
        {
          "name": "alloc::vec::Vec<cosmwasm_std::metadata::DenomUnit>",
          "type": "array",
          "items": 2
        }
      ]
    },
    "denoms": {
      "type": "v1",
      "root": 6,
      "definitions": [
        {
          "name": "cosmwasm_std_metadata_DenomMetadata",
          "description": "Replicates the cosmos-sdk bank module Metadata type",
          "type": "struct",
          "properties": {
            "base": {
              "value": 1
            },
            "denom_units": {
              "value": 5
            },
            "description": {
              "value": 1
            },
            "display": {
              "value": 1
            },
            "name": {
              "value": 1
            },
            "symbol": {
              "value": 1
            },
            "uri": {
              "value": 1
            },
            "uri_hash": {
              "value": 1
            }
          }
        },
        {
          "name": "String",
          "type": "string"
        },
        {
          "name": "cosmwasm_std_metadata_DenomUnit",
          "description": "Replicates the cosmos-sdk bank module DenomUnit type",
          "type": "struct",
          "properties": {
            "aliases": {
              "value": 4
            },
            "denom": {
              "value": 1
            },
            "exponent": {
              "value": 3
            }
          }
        },
        {
          "name": "u32",
          "type": "integer",
          "precision": 32,
          "signed": false
        },
        {
          "name": "alloc::vec::Vec<alloc::string::String>",
          "type": "array",
          "items": 1
        },
        {
          "name": "alloc::vec::Vec<cosmwasm_std::metadata::DenomUnit>",
          "type": "array",
          "items": 2
        },
        {
          "name": "alloc::vec::Vec<cosmwasm_std::metadata::DenomMetadata>",
          "type": "array",
          "items": 0
        }
      ]
    },
    "mirror_env": {
      "type": "v1",
      "root": 0,
      "definitions": [
        {
          "name": "cosmwasm_std_types_Env",
          "type": "struct",
          "properties": {
            "block": {
              "value": 1
            },
            "contract": {
              "value": 9
            },
            "transaction": {
              "description": "Information on the transaction this message was executed in.\nThe field is unset when the `MsgExecuteContract`/`MsgInstantiateContract`/`MsgMigrateContract`\nis not executed as part of a transaction.",
              "value": 8
            }
          }
        },
        {
          "name": "cosmwasm_std_types_BlockInfo",
          "type": "struct",
          "properties": {
            "chain_id": {
              "value": 4
            },
            "height": {
              "description": "The height of a block is the number of blocks preceding it in the blockchain.",
              "value": 2
            },
            "time": {
              "description": "Absolute time of the block creation in seconds since the UNIX epoch (00:00:00 on 1970-01-01 UTC).\n\nThe source of this is the [BFT Time in Tendermint](https://github.com/tendermint/tendermint/blob/58dc1726/spec/consensus/bft-time.md),\nwhich has the same nanosecond precision as the `Timestamp` type.\n\n# Examples\n\nUsing chrono:\n\n```\n# use cosmwasm_std::{Addr, Binary, BlockInfo, ContractInfo, Env, MessageInfo, Timestamp, TransactionInfo};\n# let env = Env {\n#     block: BlockInfo {\n#         height: 12_345,\n#         time: Timestamp::from_nanos(1_571_797_419_879_305_533),\n#         chain_id: \"cosmos-testnet-14002\".to_string(),\n#     },\n#     transaction: Some(TransactionInfo::new(3, Binary::from_hex(\"E5469DACEC17CEF8A260FD37675ED87E7FB6A2B5AD95193C51308006C7E494B3\").unwrap())),\n#     contract: ContractInfo {\n#         address: Addr::unchecked(\"contract\"),\n#     },\n# };\n# extern crate chrono;\nuse chrono::NaiveDateTime;\nlet seconds = env.block.time.seconds();\nlet nsecs = env.block.time.subsec_nanos();\nlet dt = NaiveDateTime::from_timestamp(seconds as i64, nsecs as u32);\n```\n\nCreating a simple millisecond-precision timestamp (as used in JavaScript):\n\n```\n# use cosmwasm_std::{Addr, Binary, BlockInfo, ContractInfo, Env, MessageInfo, Timestamp, TransactionInfo};\n# let env = Env {\n#     block: BlockInfo {\n#         height: 12_345,\n#         time: Timestamp::from_nanos(1_571_797_419_879_305_533),\n#         chain_id: \"cosmos-testnet-14002\".to_string(),\n#     },\n#     transaction: Some(TransactionInfo::new(3, Binary::from_hex(\"E5469DACEC17CEF8A260FD37675ED87E7FB6A2B5AD95193C51308006C7E494B3\").unwrap())),\n#     contract: ContractInfo {\n#         address: Addr::unchecked(\"contract\"),\n#     },\n# };\nlet millis = env.block.time.nanos() / 1_000_000;\n```",
              "value": 3
            }
          }
        },
        {
          "name": "u64",
          "type": "integer",
          "precision": 64,
          "signed": false
        },
        {
          "name": "cosmwasm_std_timestamp_Timestamp",
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n```\n# use cosmwasm_std::Timestamp;\nlet ts = Timestamp::from_nanos(1_000_000_202);\nassert_eq!(ts.nanos(), 1_000_000_202);\nassert_eq!(ts.seconds(), 1);\nassert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2);\nassert_eq!(ts.nanos(), 3_000_000_202);\nassert_eq!(ts.seconds(), 3);\nassert_eq!(ts.subsec_nanos(), 202);\n```",
          "type": "timestamp"
        },
        {
          "name": "String",
          "type": "string"
        },
        {
          "name": "cosmwasm_std_types_TransactionInfo",
          "type": "struct",
          "properties": {
            "hash": {
              "defaulting": true,
              "description": "Hash of the transaction.\n\nIf the blockchain's CosmWasm version is below 3.0, this field\nwill default to being empty.",
              "value": 7
            },
            "index": {
              "description": "The position of this transaction in the block. The first\ntransaction has index 0.\n\nThis allows you to get a unique transaction identifier in this chain\nusing the pair (`env.block.height`, `env.transaction.index`).\n",
              "value": 6
            }
          }
        },
        {
          "name": "u32",
          "type": "integer",
          "precision": 32,
          "signed": false
        },
        {
          "name": "cosmwasm_std_binary_Binary",
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization\nwith serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>.\nSee also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "binary"
        },
        {
          "name": "core::option::Option<cosmwasm_std::types::TransactionInfo>",
          "type": "optional",
          "inner": 5
        },
        {
          "name": "cosmwasm_std_types_ContractInfo",
          "type": "struct",
          "properties": {
            "address": {
              "value": 10
            }
          }
        },
        {
          "name": "cosmwasm_std_addresses_Addr",
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no\nassumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways\n1. Use `Addr::unchecked(input)`\n2. Use `let checked: Addr = deps.api.addr_validate(input)?`\n3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?`\n4. Deserialize from JSON. This must only be done from JSON that was validated before\nsuch as a contract's state. `Addr` must not be used in messages sent by the user\nbecause this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create\na mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String`\ninstance.",
          "type": "address"
        }
      ]
    }
  }
}
